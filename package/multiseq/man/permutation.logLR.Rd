% Generated by roxygen2 (4.0.2): do not edit by hand
\name{permutation.logLR}
\alias{permutation.logLR}
\title{Perform permutation-based test using logLR as a test statistic.}
\usage{
permutation.logLR(pheno.dat, geno.dat, library.read.depth = NULL,
  numPerm = 100, numSig = 10, eps = 0.01,
  use.default.compute.logLR = TRUE, minobs = 1, pseudocounts = 0.5,
  all = FALSE, center = FALSE, repara = TRUE, forcebin = FALSE,
  lm.approx = TRUE, disp = "add", nullcheck = TRUE, pointmass = TRUE,
  prior = "uniform", gridmult = 2, mixsd = NULL, VB = FALSE,
  cxx = TRUE, maxlogLR = NULL)
}
\arguments{
\item{pheno.dat:}{a matrix of nsig (# of samples) by n counts where n should be a power of 2}

\item{geno.dat:}{a matrix of numC (number of SNPs or number of covariates) by nsig; each row contains genotypes/covariate value for each sample.}

\item{library.read.depth:}{an nsig-vector containing the total number of reads for each sample (used to test for association with the total intensity). Defaults to NULL.}

\item{numPerm:}{number of permutations; if numPerm == NULL, do not perform permutation, but return logLR.}

\item{numSig:}{permutation stops when number of permuted data with significant test statistic reaches this number.}

\item{eps:}{when logLR == 0, we use a value sampled from Unif(-eps, 0) as logLR.}

\item{use.default.compute.logLR:}{bool, if TRUE, it uses default options in \code{\link{compute.logLR}}. Otherwise, it passes parameters to \code{\link{compute.logLR}}.}

\item{minobs:}{minimum number of obs required to be in each logistic model}

\item{pseudocounts:}{a number to be added to counts}

\item{all:}{bool, if TRUE pseudocounts are added to all entries, if FALSE pseudocounts are added only to cases when either number of successes or number of failures (but not both) is 0}

\item{center:}{bool, indicating whether to center g}

\item{repara:}{bool, indicating whether to reparameterize alpha and beta so that their likelihoods can be factorized.}

\item{forcebin:}{bool, if TRUE don't allow for overdipersion. Defaults to TRUE if nsig=1}

\item{lm.approx:}{bool, indicating whether a WLS alternative should be used}

\item{disp:}{"all" or "mult", indicates which type of overdispersion is assumed when lm.approx=TRUE}

\item{pointmass:}{bool, indicating whether or not to use point mass in vector of sigmas}

\item{prior:}{used in EM}

\item{gridmult:}{density of grid of sigma vector}

\item{nullcheck:}{bool, if TRUE check that any fitted model exceeds the "null" likelihood}

\item{mixsd:}{vector of sigma components to be specified for mixture model; defaults to NULL, in which case an automatic procedure is used}

\item{VB:}{bool, indicates whether to use a variational Bayes alternative to EM}

\item{cxx:}{bool, indicating whether to use Rcode or c++ code (faster)}

\item{maxlogLR:}{a positive number, default=NULL, if maxlogLR is provided as a positive number, the function returns this number as logLR when logLR is infinite.}
}
\value{
a list of "most.sig.SNP.posi" (if there are multiple SNPs, returns position of SNPs with strongest signal), "pval", "logLR" (output from compute.logLR for each SNP), "Count_stop" (when permutaton stops), "Count_sig" (number of permuted data with significant test statistic), "numPerm" (parameter), and "numSig" (parameter).
}
\description{
This function takes a series of Poisson count signals \code{pheno.dat}, with data on different samples in each row and genotype from multiple SNPs (or any covariate) \code{geno.dat} for each sample, and returns p-value obtained by permutation (use logLR as a test statistic). If multiple SNPs are provided, this function use max(logLR) as a test statistic.
Parameters \code{minobs}, \code{pseudocounts}, \code{all}, \code{center}, \code{repara}, \code{forcebin}, \code{lm.approx}, and \code{disp} are passed to \code{\link{glm.approx}}. Parameters \code{pointmass}, \code{prior}, \code{gridmult}, \code{nullcheck}, \code{mixsd}, \code{VB} are passed to \pkg{ashr}.
}

